plugins {
    id 'net.researchgate.release' version '2.6.0'
}

repositories {
    mavenCentral()
    jcenter()
}

group 'cc.roja.photos'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'

mainClassName = 'cc.photos.uploader.UploaderApp'
sourceCompatibility = 1.10

configurations {
    deployerJars
}

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'com.google.api-client', name: 'google-api-client', version: '1.23.0'
    compile "com.google.oauth-client:google-oauth-client-java6:1.23.0"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.5"
    compile 'com.offbytwo:docopt:0.6.0.20150202'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile "io.github.openunirest:unirest-java:2.2.08"
    compile group: 'org.json', name: 'json', version: '20180130'
    deployerJars "org.apache.maven.wagon:wagon-ssh:2.9"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

distTar {
    compression = Compression.GZIP
}

// don't include the windows `*.bat` file
startScripts {
    doLast {
        delete windowsScript
    }
}

// don't include the `*.zip` archives
distZip.enabled = false
task deleteZip {
    configurations.archives.artifacts.removeAll {it.file =~ 'zip'}
}
tasks.install.dependsOn(deleteZip)

// remove lingering `*.tar` && `*.jar` archives
configurations.archives.artifacts.removeAll {it.file =~ 'tar'}

release {
    git {
        signTag = true
    }
}

// Deployment
def Properties properties = new Properties()
properties.load(project.rootProject.file("deploy.properties").newDataInputStream())

task deployJar(type: Jar)

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: sprintf('file://%s', properties.getProperty('deploy.publish_folder'))) {
            authentication(userName: properties.getProperty('deploy.username'), privateKey: properties.getProperty('deploy.private_key'))
        }
    }
}

// ensure archives are uploaded after successfull release build
afterReleaseBuild.dependsOn uploadArchives
